"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import json
import os
import sys

from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load variables defined in .env files.
for env_file in (BASE_DIR / ".env", BASE_DIR.parent / ".env"):
    if env_file.exists():
        load_dotenv(env_file)

try:
    with open(os.path.join(BASE_DIR, 'config.json')) as config_file:
        config = json.load(config_file)
except IOError:
    config = {}


def get_var(name, default_value=None):
    """
    The function first searches for a environmental variable called by the
    name. Then, if not found, it searches for the value from config.json file.
    If the variable is not found on either place, then it returns default_value.
    """
    return os.environ.get(name, config.get(name, default_value))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_var('SECRET_KEY', 'development_key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(get_var('DEBUG', 0)))

ALLOWED_HOSTS = []
ALLOWED_HOSTS_ENV = get_var('ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS.extend(ALLOWED_HOSTS_ENV.split(','))

CSRF_TRUSTED_ORIGINS = []
TRUSTED_ORIGINS_ENV = get_var('TRUSTED_ORIGINS')
if TRUSTED_ORIGINS_ENV:
    CSRF_TRUSTED_ORIGINS.extend(TRUSTED_ORIGINS_ENV.split(','))

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'bones',
    'django_select2',
    'simple_history',
    'django_filters',
    #    'allauth',
    #    'allauth.account',
    #    'allauth.socialaccount',
    #    'allauth.socialaccount.providers.orcid',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# ORCID Allauth Settings
# https://django-allauth.readthedocs.io/en/latest/installation.html

# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.ModelBackend',
#     'allauth.account.auth_backends.AuthenticationBackend',
# ]

# SOCIALACCOUNT_PROVIDERS = {
#     'orcid': {
#         'BASE_DOMAIN': 'orcid.org',
#         'MEMBER_API': False,
#         'APP': {
#             'client_id': get_var("ORCID_CLIENT_ID", ''),
#             'secret': get_var("ORCID_SECRET", ''),
#             'key': '',
#         }
#     }
# }


WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

def _build_mssql_extra_params():
    extra_params = []
    encrypt = get_var('MSSQL_ENCRYPT')
    if encrypt:
        extra_params.append(f"Encrypt={encrypt}")
    trust = get_var('MSSQL_TRUST_CERT')
    if trust:
        extra_params.append(f"TrustServerCertificate={trust}")
    return ';'.join(extra_params)


DATABASES = {
    'default': {
        'ENGINE': 'mssql',
        'HOST': get_var('MSSQL_HOST', 'localhost'),
        'NAME': get_var('MSSQL_DB', ''),
        'USER': get_var('MSSQL_USER', ''),
        'PASSWORD': get_var('MSSQL_PASSWORD', ''),
        'PORT': get_var('MSSQL_PORT', '1433'),
        'OPTIONS': {
            'driver': get_var('MSSQL_DRIVER', 'ODBC Driver 18 for SQL Server'),
            'host_is_server': True,
        },
    }
}

extra_params = _build_mssql_extra_params()
if extra_params:
    DATABASES['default']['OPTIONS']['extra_params'] = extra_params

tds_version = get_var('MSSQL_TDS_VERSION')
if tds_version:
    DATABASES['default']['OPTIONS']['tds_version'] = tds_version

# Use SQLite for automated tests to keep the suite lightweight.
if 'test' in sys.argv:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Helsinki'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = get_var('STATIC_ROOT', os.path.join(BASE_DIR, 'static'))

# Media files

MEDIA_URL = 'media/'
MEDIA_ROOT = get_var('MEDIA_ROOT', os.path.join(BASE_DIR, 'media'))

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
