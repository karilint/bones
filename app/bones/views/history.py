"""History views leveraging django-simple-history records."""
from __future__ import annotations

from dataclasses import dataclass
from typing import Any, Iterable, List, Mapping, Optional

from django.contrib.auth.mixins import LoginRequiredMixin
from django.db import DatabaseError
from django.http import Http404
from django.shortcuts import get_object_or_404
from django.utils.translation import gettext_lazy as _
from django.views.generic import DetailView, TemplateView

from ..models import CompletedOccurrence, CompletedTransect, CompletedWorkflow, Question
from .detail import format_value, safe_reverse


@dataclass
class HistoryLink:
    """Metadata describing navigation targets for history pages."""

    label: str
    description: str
    icon: str
    url: Optional[str]


class HistoryIndexView(LoginRequiredMixin, TemplateView):
    """Landing page summarising available history timelines."""

    template_name = "bones/history/index.html"

    def get_history_sections(self) -> List[HistoryLink]:
        """Return the primary history sections surfaced on the index."""

        return [
            HistoryLink(
                label=_("Transects"),
                description=_("Review audit history captured for completed transects."),
                icon="fa-solid fa-route",
                url=safe_reverse("history:transects"),
            ),
            HistoryLink(
                label=_("Occurrences"),
                description=_("Inspect changes made to completed occurrences."),
                icon="fa-solid fa-frog",
                url=safe_reverse("history:occurrences"),
            ),
            HistoryLink(
                label=_("Workflows"),
                description=_("Track workflow status changes across completed runs."),
                icon="fa-solid fa-diagram-project",
                url=safe_reverse("history:workflows"),
            ),
            HistoryLink(
                label=_("Questions"),
                description=_("Audit updates to survey questions and configuration."),
                icon="fa-solid fa-circle-question",
                url=safe_reverse("history:questions"),
            ),
        ]

    def get_context_data(self, **kwargs: Any) -> Mapping[str, Any]:  # type: ignore[override]
        context = super().get_context_data(**kwargs)
        context.update(
            {
                "page_title": _("History"),
                "page_icon": "fa-solid fa-clock-rotate-left",
                "intro_text": _(
                    "Browse audit trails generated by django-simple-history for completed "
                    "records and reference data."
                ),
                "breadcrumbs": [
                    {"label": _("Dashboard"), "url": safe_reverse("dashboard")},
                    {"label": _("History"), "url": None},
                ],
                "history_sections": self.get_history_sections(),
            }
        )
        return context


class HistoryBaseMixin(LoginRequiredMixin):
    """Common helpers for history timelines and entry detail pages."""

    model = None
    entity_label: str = ""
    entity_plural_label: str = ""
    page_icon: str = "fa-solid fa-clock-rotate-left"
    intro_text: str = ""
    list_route_name: str | None = None
    detail_route_name: str | None = None
    record_route_name: str | None = None
    object_detail_route_name: str | None = None
    max_entries: int = 50

    history_error: bool

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.history_error = False

    # pylint: disable=unused-argument
    def get_page_title(self, **kwargs: Any) -> str:
        """Return the page title for the current request."""

        return self.entity_plural_label

    def get_history_queryset(self):
        """Return the queryset of historical entries for the configured model."""

        if not self.model:
            raise AssertionError("History views must define a model")
        return self.model.history.select_related("history_user").order_by("-history_date")

    def _limit_entries(self, entries: Iterable[Any]) -> List[Any]:
        if self.max_entries:
            return list(entries)[: self.max_entries]
        return list(entries)

    def get_history_entries(self) -> List[Any]:
        try:
            return self._limit_entries(self.get_history_queryset())
        except DatabaseError:
            self.history_error = True
            return []

    def get_entry_object_id(self, entry: Any) -> Optional[Any]:
        """Return the primary key of the object represented by the entry."""

        obj_id = getattr(entry, "history_object_id", None)
        instance = getattr(entry, "instance", None)
        if instance is not None:
            obj_id = getattr(instance, "pk", obj_id)
        return obj_id

    def get_entry_url(self, entry: Any) -> Optional[str]:
        """Return the URL to the entry detail view when available."""

        if not self.detail_route_name:
            return None
        object_id = self.get_entry_object_id(entry)
        if object_id is None:
            return None
        history_id = getattr(entry, "history_id", None)
        if history_id is None:
            return None
        return safe_reverse(
            self.detail_route_name,
            kwargs={"pk": object_id, "history_id": history_id},
        )

    def get_record_url(self, entry: Any) -> Optional[str]:
        """Return the URL to the record timeline when available."""

        if not self.record_route_name:
            return None
        object_id = self.get_entry_object_id(entry)
        if object_id is None:
            return None
        return safe_reverse(self.record_route_name, kwargs={"pk": object_id})

    def get_entity_detail_url(self, obj: Any) -> Optional[str]:
        if not self.object_detail_route_name or obj is None:
            return None
        return safe_reverse(self.object_detail_route_name, kwargs={"pk": getattr(obj, "pk", None)})

    def build_breadcrumbs(self) -> List[dict[str, Optional[str]]]:
        return [
            {"label": _("Dashboard"), "url": safe_reverse("dashboard")},
            {"label": _("History"), "url": safe_reverse("history:index")},
            {"label": self.entity_plural_label, "url": safe_reverse(self.list_route_name)},
        ]


class HistoryTimelineView(HistoryBaseMixin, TemplateView):
    """Display a paginated timeline of history entries for an entity."""

    template_name = "bones/history/timeline_list.html"

    def get_context_data(self, **kwargs: Any) -> Mapping[str, Any]:  # type: ignore[override]
        context = super().get_context_data(**kwargs)
        entries = [
            {
                "record": entry,
                "detail_url": self.get_entry_url(entry),
                "record_url": self.get_record_url(entry),
            }
            for entry in self.get_history_entries()
        ]
        breadcrumbs = self.build_breadcrumbs()
        if breadcrumbs:
            breadcrumbs[-1]["url"] = None
        context.update(
            {
                "page_title": self.get_page_title(),
                "page_icon": self.page_icon,
                "intro_text": self.intro_text,
                "breadcrumbs": breadcrumbs,
                "history_entries": entries,
                "history_error": self.history_error,
                "entity_label": self.entity_label,
                "entity_plural_label": self.entity_plural_label,
            }
        )
        return context


class ObjectHistoryTimelineView(HistoryBaseMixin, DetailView):
    """Timeline of history entries for a specific record."""

    template_name = "bones/history/timeline_record.html"
    context_object_name = "record"

    def get_queryset(self):
        if not self.model:
            raise AssertionError("History views must define a model")
        return self.model.objects.all()

    def get_page_title(self, **kwargs: Any) -> str:  # type: ignore[override]
        return _("{entity} history for {object}").format(
            entity=self.entity_label,
            object=self.object,
        )

    def get_history_queryset(self):  # type: ignore[override]
        try:
            return (
                self.object.history.select_related("history_user").order_by("-history_date")
            )
        except DatabaseError:
            self.history_error = True
            return []

    def get_history_entries(self) -> List[Any]:  # type: ignore[override]
        queryset = self.get_history_queryset()
        if isinstance(queryset, list):
            return queryset
        try:
            return self._limit_entries(queryset)
        except DatabaseError:
            self.history_error = True
            return []

    def get_context_data(self, **kwargs: Any) -> Mapping[str, Any]:  # type: ignore[override]
        context = super().get_context_data(**kwargs)
        entries = [
            {
                "record": entry,
                "detail_url": self.get_entry_url(entry),
            }
            for entry in self.get_history_entries()
        ]
        breadcrumbs = self.build_breadcrumbs()
        breadcrumbs.append({"label": str(self.object), "url": None})
        context.update(
            {
                "page_title": self.get_page_title(),
                "page_icon": self.page_icon,
                "intro_text": self.intro_text,
                "breadcrumbs": breadcrumbs,
                "history_entries": entries,
                "history_error": self.history_error,
                "entity_label": self.entity_label,
                "entity_plural_label": self.entity_plural_label,
                "object_detail_url": self.get_entity_detail_url(self.object),
            }
        )
        return context


class HistoryEntryDetailView(HistoryBaseMixin, DetailView):
    """Detail view displaying the diff for a specific history entry."""

    template_name = "bones/history/entry_detail.html"
    context_object_name = "history_entry"

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.parent_object = None

    def get_queryset(self):
        if not self.model:
            raise AssertionError("History views must define a model")
        # Restrict queryset to the historical records for the specified object.
        parent = get_object_or_404(self.model, pk=self.kwargs.get("pk"))
        self.parent_object = parent
        try:
            return parent.history.select_related("history_user")
        except DatabaseError as exc:
            raise Http404 from exc

    def get_object(self, queryset=None):  # type: ignore[override]
        queryset = queryset or self.get_queryset()
        history_id = self.kwargs.get("history_id")
        try:
            return queryset.get(history_id=history_id)
        except queryset.model.DoesNotExist as exc:  # type: ignore[attr-defined]
            raise Http404 from exc
        except DatabaseError as exc:
            raise Http404 from exc

    def get_page_title(self, **kwargs: Any) -> str:  # type: ignore[override]
        entry = self.object
        timestamp = getattr(entry, "history_date", None)
        if timestamp:
            return _("{entity} history on {date}").format(
                entity=self.entity_label,
                date=timestamp.strftime("%Y-%m-%d %H:%M"),
            )
        return _("{entity} history entry").format(entity=self.entity_label)

    def get_history_diff(self, entry: Any) -> tuple[list[dict[str, Any]], bool]:
        """Return formatted changes for the entry and whether diffing failed."""

        try:
            previous = entry.prev_record
        except DatabaseError:
            return ([], True)

        if not previous:
            return ([], False)

        try:
            diff = entry.diff_against(previous)
        except Exception:  # pragma: no cover - defensive for diff errors
            return ([], True)

        changes: list[dict[str, Any]] = []
        for change in diff.changes:
            field_label = change.field
            try:
                field = self.model._meta.get_field(change.field)
                field_label = getattr(field, "verbose_name", field_label)
            except Exception:  # pragma: no cover - fallback for unknown fields
                field_label = change.field
            changes.append(
                {
                    "field": change.field,
                    "label": field_label,
                    "old": format_value(change.old),
                    "new": format_value(change.new),
                }
            )
        return (changes, False)

    def get_context_data(self, **kwargs: Any) -> Mapping[str, Any]:  # type: ignore[override]
        context = super().get_context_data(**kwargs)
        parent = getattr(self, "parent_object", None)
        if parent is None:
            parent = get_object_or_404(self.model, pk=self.kwargs.get("pk"))
            self.parent_object = parent
        changes, diff_error = self.get_history_diff(self.object)
        breadcrumbs = self.build_breadcrumbs()
        breadcrumbs.append(
            {
                "label": str(parent),
                "url": safe_reverse(self.record_route_name, kwargs={"pk": parent.pk}),
            }
        )
        breadcrumbs.append({"label": self.get_page_title(), "url": None})

        def _entry_nav(target: Optional[Any]) -> Optional[str]:
            if not target:
                return None
            return safe_reverse(
                self.detail_route_name,
                kwargs={"pk": parent.pk, "history_id": getattr(target, "history_id", None)},
            )

        try:
            previous_entry = self.object.prev_record
        except DatabaseError:
            previous_entry = None
        try:
            next_entry = self.object.next_record
        except DatabaseError:
            next_entry = None

        context.update(
            {
                "page_title": self.get_page_title(),
                "page_icon": self.page_icon,
                "intro_text": self.intro_text,
                "breadcrumbs": breadcrumbs,
                "entity_label": self.entity_label,
                "entity_plural_label": self.entity_plural_label,
                "record": parent,
                "history_changes": changes,
                "history_diff_error": diff_error,
                "previous_entry_url": _entry_nav(previous_entry),
                "next_entry_url": _entry_nav(next_entry),
                "record_history_url": safe_reverse(
                    self.record_route_name, kwargs={"pk": parent.pk}
                ),
                "list_url": safe_reverse(self.list_route_name),
            }
        )
        return context


class CompletedTransectHistoryListView(HistoryTimelineView):
    model = CompletedTransect
    entity_label = _("Transect")
    entity_plural_label = _("Transect history")
    intro_text = _(
        "Timeline of changes captured for completed transects, ordered from most recent to oldest."
    )
    list_route_name = "history:transects"
    detail_route_name = "history:transect_entry"
    record_route_name = "history:transect_record"
    object_detail_route_name = "transects:detail"


class CompletedTransectHistoryRecordView(ObjectHistoryTimelineView):
    model = CompletedTransect
    entity_label = _("Transect")
    entity_plural_label = _("Transect history")
    intro_text = _(
        "Review the audit log for this transect, including workflow and metadata updates."
    )
    list_route_name = "history:transects"
    detail_route_name = "history:transect_entry"
    record_route_name = "history:transect_record"
    object_detail_route_name = "transects:detail"


class CompletedTransectHistoryEntryView(HistoryEntryDetailView):
    model = CompletedTransect
    entity_label = _("Transect")
    entity_plural_label = _("Transect history")
    intro_text = _("Compare this revision against the previous state to understand what changed.")
    list_route_name = "history:transects"
    detail_route_name = "history:transect_entry"
    record_route_name = "history:transect_record"
    object_detail_route_name = "transects:detail"


class CompletedOccurrenceHistoryListView(HistoryTimelineView):
    model = CompletedOccurrence
    entity_label = _("Occurrence")
    entity_plural_label = _("Occurrence history")
    intro_text = _(
        "Timeline of changes recorded for completed occurrences, including response updates."
    )
    list_route_name = "history:occurrences"
    detail_route_name = "history:occurrence_entry"
    record_route_name = "history:occurrence_record"
    object_detail_route_name = "occurrences:detail"


class CompletedOccurrenceHistoryRecordView(ObjectHistoryTimelineView):
    model = CompletedOccurrence
    entity_label = _("Occurrence")
    entity_plural_label = _("Occurrence history")
    intro_text = _(
        "Review captured edits for this occurrence, including workflow transitions and metadata changes."
    )
    list_route_name = "history:occurrences"
    detail_route_name = "history:occurrence_entry"
    record_route_name = "history:occurrence_record"
    object_detail_route_name = "occurrences:detail"


class CompletedOccurrenceHistoryEntryView(HistoryEntryDetailView):
    model = CompletedOccurrence
    entity_label = _("Occurrence")
    entity_plural_label = _("Occurrence history")
    intro_text = _("Compare captured responses and metadata between revisions.")
    list_route_name = "history:occurrences"
    detail_route_name = "history:occurrence_entry"
    record_route_name = "history:occurrence_record"
    object_detail_route_name = "occurrences:detail"


class CompletedWorkflowHistoryListView(HistoryTimelineView):
    model = CompletedWorkflow
    entity_label = _("Workflow")
    entity_plural_label = _("Workflow history")
    intro_text = _(
        "Timeline of workflow status transitions and metadata updates across completed workflows."
    )
    list_route_name = "history:workflows"
    detail_route_name = "history:workflow_entry"
    record_route_name = "history:workflow_record"
    object_detail_route_name = None


class CompletedWorkflowHistoryRecordView(ObjectHistoryTimelineView):
    model = CompletedWorkflow
    entity_label = _("Workflow")
    entity_plural_label = _("Workflow history")
    intro_text = _("Review lifecycle changes for this workflow instance.")
    list_route_name = "history:workflows"
    detail_route_name = "history:workflow_entry"
    record_route_name = "history:workflow_record"
    object_detail_route_name = None


class CompletedWorkflowHistoryEntryView(HistoryEntryDetailView):
    model = CompletedWorkflow
    entity_label = _("Workflow")
    entity_plural_label = _("Workflow history")
    intro_text = _("Inspect changes to workflow metadata and assigned users between revisions.")
    list_route_name = "history:workflows"
    detail_route_name = "history:workflow_entry"
    record_route_name = "history:workflow_record"
    object_detail_route_name = None


class QuestionHistoryListView(HistoryTimelineView):
    model = Question
    entity_label = _("Question")
    entity_plural_label = _("Question history")
    intro_text = _(
        "Timeline of edits to question wording, validation, and reference metadata."
    )
    list_route_name = "history:questions"
    detail_route_name = "history:question_entry"
    record_route_name = "history:question_record"
    object_detail_route_name = "templates:question_detail"


class QuestionHistoryRecordView(ObjectHistoryTimelineView):
    model = Question
    entity_label = _("Question")
    entity_plural_label = _("Question history")
    intro_text = _("Audit individual changes applied to this question.")
    list_route_name = "history:questions"
    detail_route_name = "history:question_entry"
    record_route_name = "history:question_record"
    object_detail_route_name = "templates:question_detail"


class QuestionHistoryEntryView(HistoryEntryDetailView):
    model = Question
    entity_label = _("Question")
    entity_plural_label = _("Question history")
    intro_text = _("Review what changed compared to the previous revision.")
    list_route_name = "history:questions"
    detail_route_name = "history:question_entry"
    record_route_name = "history:question_record"
    object_detail_route_name = "templates:question_detail"
